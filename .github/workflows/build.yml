name: Build StockTracker

on:
  # push:
  #   # branches: [ main, develop ]
  #   tags: [ 'v*' ]
  # pull_request:
  #   branches: [ main ]
  release:
    types: [published]
env:
  QT_VERSION: '6.6.0'
  CMAKE_VERSION: '3.16'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu 22.04
            os: ubuntu-22.04
            qt_arch: gcc_64
            cmake_generator: "Unix Makefiles"
            artifact_name: StockTracker-Linux
            executable_extension: ""
            
          - name: Windows Latest
            os: windows-latest
            qt_arch: win64_msvc2019_64
            cmake_generator: "Visual Studio 17 2022"
            artifact_name: StockTracker-Windows
            executable_extension: ".exe"
            
          - name: macOS Latest
            os: macos-latest
            qt_arch: clang_64
            cmake_generator: "Unix Makefiles"
            artifact_name: StockTracker-macOS
            executable_extension: ""

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        arch: ${{ matrix.qt_arch }}
        cache: true
        modules: 'qtcharts qtnetworkauth'

    # Ubuntu specific dependencies
    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libgl1-mesa-dev \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-composite0 \
          libxcb-cursor0 \
          libxcb-damage0 \
          libxcb-dpms0 \
          libxcb-dri2-0 \
          libxcb-dri3-0 \
          libxcb-ewmh2 \
          libxcb-glx0 \
          libxcb-present0 \
          libxcb-randr0 \
          libxcb-record0 \
          libxcb-render0 \
          libxcb-res0 \
          libxcb-screensaver0 \
          libxcb-shape0 \
          libxcb-shm0 \
          libxcb-sync1 \
          libxcb-util1

    # Windows specific setup
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.3

    # macOS specific dependencies
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake
      working-directory: build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}" -G "${{ matrix.cmake_generator }}"

    - name: Build application
      working-directory: build
      run: cmake --build . --config Release

    # Ubuntu: Create AppImage
    - name: Create AppImage (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Install linuxdeploy and Qt plugin
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        cp build/bin/stock-tracker AppDir/usr/bin/
        
        # Create desktop file
        mkdir -p AppDir/usr/share/applications
        cat > AppDir/usr/share/applications/stocktracker.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=StockTracker
        Comment=Stock Tracking Application
        Exec=stock-tracker
        Icon=stocktracker
        Categories=Finance;Office;
        EOF
        
        # Copy icon if exists
        if [ -f "images/logo.ico" ]; then
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp images/logo.ico AppDir/usr/share/icons/hicolor/256x256/apps/stocktracker.ico
        fi
        
        # Remove problematic SQL drivers that cause issues
        if [ -d "${{ env.Qt6_DIR }}/plugins/sqldrivers" ]; then
          find "${{ env.Qt6_DIR }}/plugins/sqldrivers" -name "*mimer*" -delete || true
          find "${{ env.Qt6_DIR }}/plugins/sqldrivers" -name "*oracle*" -delete || true
        fi
        
        # Create AppImage with error handling
        export QML_SOURCES_PATHS=src
        export QMAKE=${{ env.Qt6_DIR }}/bin/qmake
        export LD_LIBRARY_PATH=${{ env.Qt6_DIR }}/lib:$LD_LIBRARY_PATH
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage || {
          echo "AppImage creation failed, creating simple archive instead"
          mkdir -p StockTracker-Linux
          cp -r AppDir/usr/* StockTracker-Linux/
          tar -czf StockTracker-Linux.tar.gz StockTracker-Linux/
        }

    # Windows: Package with windeployqt
    - name: Package Windows application
      if: matrix.os == 'windows-latest'
      working-directory: build/bin
      run: |
        # Deploy Qt libraries
        windeployqt.exe --release --no-translations --no-system-d3d-compiler stock-tracker.exe
        
        # Create distribution folder
        mkdir ../../dist
        xcopy /E /I . ..\..\dist\StockTracker\

    # macOS: Create app bundle and DMG
    - name: Package macOS application
      if: matrix.os == 'macos-latest'
      run: |
        # Check if app bundle exists, if not create it
        if [ ! -d "build/bin/stock-tracker.app" ]; then
          echo "App bundle not found, creating one..."
          mkdir -p build/bin/stock-tracker.app/Contents/{MacOS,Resources}
          
          # Copy executable
          cp build/bin/stock-tracker build/bin/stock-tracker.app/Contents/MacOS/
          
          # Create Info.plist
          cat > build/bin/stock-tracker.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>stock-tracker</string>
            <key>CFBundleIdentifier</key>
            <string>com.stocktracker.app</string>
            <key>CFBundleName</key>
            <string>StockTracker</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.14</string>
        </dict>
        </plist>
        EOF
          
          # Copy icon if exists
          if [ -f "images/logo.ico" ]; then
            cp images/logo.ico build/bin/stock-tracker.app/Contents/Resources/
          fi
        fi
        
        # Deploy Qt libraries
        macdeployqt build/bin/stock-tracker.app -dmg
        
        # Move DMG to predictable location
        mkdir dist
        if [ -f "build/bin/stock-tracker.dmg" ]; then
          mv build/bin/stock-tracker.dmg dist/StockTracker.dmg
        else
          echo "DMG not created, creating archive instead"
          tar -czf dist/StockTracker-macOS.tar.gz -C build/bin stock-tracker.app
        fi

    # Upload artifacts
    - name: Upload Ubuntu AppImage
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          StockTracker-*.AppImage
          StockTracker-Linux.tar.gz

    - name: Upload Windows build
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/

    - name: Upload macOS DMG
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/StockTracker.dmg
          dist/StockTracker-macOS.tar.gz

  # Create release on tag push
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Display structure of downloaded files
      run: ls -la artifacts/
    
    - name: Extract tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Prepare release assets
      run: |
        mkdir release-assets
        
        # Handle Linux artifacts (AppImage or tar.gz)
        if [ -f "artifacts/StockTracker-Linux/StockTracker-x86_64.AppImage" ]; then
          cp "artifacts/StockTracker-Linux/StockTracker-x86_64.AppImage" "release-assets/StockTracker-Linux-x86_64.AppImage"
        elif [ -f "artifacts/StockTracker-Linux/StockTracker-Linux.tar.gz" ]; then
          cp "artifacts/StockTracker-Linux/StockTracker-Linux.tar.gz" "release-assets/StockTracker-Linux.tar.gz"
        fi
        
        # Handle Windows artifacts
        if [ -d "artifacts/StockTracker-Windows" ]; then
          cd "artifacts/StockTracker-Windows"
          zip -r "../../release-assets/StockTracker-Windows.zip" *
          cd ../..
        fi
        
        # Handle macOS artifacts (DMG or tar.gz)
        if [ -f "artifacts/StockTracker-macOS/StockTracker.dmg" ]; then
          cp "artifacts/StockTracker-macOS/StockTracker.dmg" "release-assets/StockTracker-macOS.dmg"
        elif [ -f "artifacts/StockTracker-macOS/StockTracker-macOS.tar.gz" ]; then
          cp "artifacts/StockTracker-macOS/StockTracker-macOS.tar.gz" "release-assets/StockTracker-macOS.tar.gz"
        fi
        
        # List what we have
        echo "Release assets prepared:"
        ls -la release-assets/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: StockTracker ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
        body: |
          ## Changes in this release
          - Automated build for Linux, Windows, and macOS
          - Built with Qt ${{ env.QT_VERSION }}
          
          ## Downloads
          - **Linux**: Download the `.AppImage` file (or `.tar.gz` if AppImage failed)
          - **Windows**: Download and extract the ZIP file
          - **macOS**: Download the `.dmg` file (or `.tar.gz` if DMG failed)
          
          ## Installation
          ### Linux
          **AppImage:**
          1. Download the AppImage
          2. Make it executable: `chmod +x StockTracker-*.AppImage`
          3. Run: `./StockTracker-*.AppImage`
          
          **Tar.gz:**
          1. Download and extract: `tar -xzf StockTracker-Linux.tar.gz`
          2. Run: `./StockTracker-Linux/bin/stock-tracker`
          
          ### Windows
          1. Download and extract the ZIP file
          2. Run `stock-tracker.exe`
          
          ### macOS
          **DMG:**
          1. Download the DMG file
          2. Open it and drag StockTracker to Applications
          
          **Tar.gz:**
          1. Download and extract: `tar -xzf StockTracker-macOS.tar.gz`
          2. Run the app from the extracted folder
        files: release-assets/*
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}